{"pages":[{"title":"小屋","text":"记录喜悦、感悟和焦虑。 最重要的是，我希望有本日记来回顾下，看看自己走了多远。 如果你碰巧出现在了这个互联网世界的小角落，不妨停下来打个招呼。 博客优化 CDN：基于 Github + jsdelivr 的解决方案 壁纸：wallpaper engine 的创意工坊 主题：Hexo&amp;icarus","link":"/about/index.html"}],"posts":[{"title":"CS144 笔记","text":"开个坑，记录下 CS144 的学习过程。 CS144 的官网：https://cs144.github.io/ 环境准备 注：CS144 用 MacOS 是不行的，因为 C++ 网络编程中用到的库具有平台依赖性，一些头文件只有 Linux 才有，从官网下载下来项目在 MacOS 上 cmake 过不了，我尝试去下载或新建，最后还是差一个头文件没补全… 在 Linux 上自然不用多说，在 Windows 上的话，我的解决方案是 Clion + wsl2。 Writing webget第一个 test 是实现一个通过 get 请求获取 web 资源的程序，即对应着讲义前文的 Networking by hand。 根据 Hints 描述以及平时的工作经验来讲，大致来讲就是通过套接字（Socket）与要访问的主机建立连接（connect），然后不断的读取从服务器端传过来的报文。因此写下了如下代码： 123456shared_ptr&lt;TCPSocket&gt; socket = make_shared&lt;TCPSocket&gt;();shared_ptr&lt;Address&gt; address = make_shared&lt;Address&gt;(host, path);socket-&gt;connect(*address);while (!socket-&gt;eof()) { cerr &lt;&lt; socket-&gt;read();} 上述代码当然是跑不通的，它暴露出了我对计算机网络的认识相当的粗浅，存在的问题有： Address根据注释，是IP/DNS相关的类，「地址」应该由位置（IP）+ 访问协议（HTTP）组成，我莫名其妙传了个资源路径 path 。 建立连接之后是发起请求的时候，这个时候通过指定 HTTP 的请求方式以及资源路径。 根据讲义的 HINTS ，发送完请求之后应当「ending outgoing bytestream」并且最后要「close」。 cerr是错误输出流，cout才是标准输出流。 因此正确的代码如下： 1234567891011void get_URL(const string &amp;host, const string &amp;path) { shared_ptr&lt;TCPSocket&gt; socket = make_shared&lt;TCPSocket&gt;(); shared_ptr&lt;Address&gt; address = make_shared&lt;Address&gt;(host, &quot;http&quot;); socket-&gt;connect(*address); socket-&gt;write(&quot;GET &quot; + path + &quot; HTTP/1.1\\r\\nHost: &quot; + host + &quot;\\r\\n\\r\\n&quot;); socket-&gt;shutdown(SHUT_WR); while (!socket-&gt;eof()) { count &lt;&lt; socket-&gt;read(); } socket-&gt;close();} Lab0","link":"/2021/01/23/CS144-%E7%AC%94%E8%AE%B0/"},{"title":"Hexo及Icarus使用","text":"Hexo及Icarus的一些使用笔记 Hexo 常用命令12hexo n/new &quot;postName&quot; 新建文章hexo n/new page &quot;pageName&quot; 新建页面 Icarus 使用缩略图文章头部增加cover: 图片地址/相对路径指定文章缩略图。 彩色突出1 Markdown 内容… 代码如下： 123{% raw %}&lt;div class=&quot;notification is-info&quot;&gt;{% endraw %}Markdown 内容...{% raw %}&lt;/div&gt;{% endraw %} 其中 is-info 表示蓝色，还有 is-success 绿色、is-warning 黄色、is-danger 红色。 彩色突出2 Markdown 内容… 代码如下： 123{% raw %}&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}Markdown 内容...{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} 同理，这里也有四种颜色。 彩色突出3 Markdown 标题 Markdown 内容… 代码如下： 12345{% raw %}&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-header&quot;&gt;{% endraw %}Markdown 标题{% raw %}&lt;/div&gt;&lt;div class=&quot;message-body&quot;&gt;{% endraw %}Markdown 内容...{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} 这里也有四种颜色。 彩色突出4 Markdown 内容... 代码如下： 123456789101112131415161718192021222324有几种样式：蓝色info：&lt;article class=&quot;message message-immersive is-primary&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;&lt;i class=&quot;fas fa-globe-asia mr-2&quot;&gt;&lt;/i&gt;Markdown 内容...&lt;/div&gt;&lt;/article&gt;红色danger:&lt;article class=&quot;message message-immersive is-danger&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;&lt;i class=&quot;fas fa-exclamation-triangle mr-2&quot;&gt;&lt;/i&gt;Markdown 内容...&lt;/div&gt;&lt;/article&gt;黄色warning:&lt;article class=&quot;message message-immersive is-warning&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;&lt;i class=&quot;fas fa-question-circle mr-2&quot;&gt;&lt;/i&gt;Markdown 内容...&lt;/div&gt;&lt;/article&gt;","link":"/2021/02/02/Hexo%E5%8F%8AIcarus%E4%BD%BF%E7%94%A8/"},{"title":"175. Combine Two Tables","text":"组合两个表，一道考察外连接的题目 ProblemTable: Person 12345678+-------------+---------+| Column Name | Type |+-------------+---------+| PersonId | int || FirstName | varchar || LastName | varchar |+-------------+---------+PersonId is the primary key column for this table. Table: Address 123456789+-------------+---------+| Column Name | Type |+-------------+---------+| AddressId | int || PersonId | int || City | varchar || State | varchar |+-------------+---------+AddressId is the primary key column for this table. Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people: 1FirstName, LastName, City, State Solution 笛卡尔积：简单来说就是(a, b) x (c, d)能得到(ac, ad, bc, bd)的一种交叉运算，在SQL中表现为两个表的行记录交叉组合，最后根据 ON 条件来筛选。 题意要求需要查询Person表的所有信息，不论Address表中是否有相应信息，即在以PersonId通过笛卡尔积连接两个表时，Address表对不上的信息就以 null 来代替，很明显是一个LEFT JOIN。 OUTER JOIN 包含 LEFT OUTER JOIN、RIGHT OUTER JOIN 以及 FULL OUTER JOIN，但是在 MySQL 中，没有 FULL OUTER JOIN 并且左连接和右连接的 OUTER 可以省略。 OUTER JOIN 就是取并集，INNER JOIN 就是取交集，MySQL 中的 INNER 也可以省略。 借助What’s the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN and FULL JOIN in MySQL上的一张图体会下区别： 因此答案为： 123456SELECT a.FirstName, a.LastName, b.City, b.StateFROM Person a Left JOIN Address bON a.PersonId=b.PersonId","link":"/2021/02/02/175-Combine-Two-Tables/"}],"tags":[{"name":"CS144","slug":"CS144","link":"/tags/CS144/"},{"name":"Leetcode-MySQL","slug":"Leetcode-MySQL","link":"/tags/Leetcode-MySQL/"}],"categories":[{"name":"计算机网络","slug":"计算机网络","link":"/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"MySQL","slug":"MySQL","link":"/categories/MySQL/"}]}